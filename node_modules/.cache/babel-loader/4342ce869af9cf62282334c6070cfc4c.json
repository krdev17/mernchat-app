{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dev\\\\Documents\\\\mern-chat-app\\\\frontend\\\\src\\\\components\\\\SingleChat.js\",\n    _s = $RefreshSig$();\n\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\n\nvar socket, selectedChatCompare;\n\nconst SingleChat = _ref => {\n  _s();\n\n  let {\n    fetchAgain,\n    setFetchAgain\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\"\n    }\n  };\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    notification,\n    setNotification\n  } = ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    }\n  };\n\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat\n        }, config);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false)); // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat; // eslint-disable-next-line\n  }, [selectedChat]);\n  useEffect(() => {\n    socket.on(\"message recieved\", newMessageRecieved => {\n      if (!selectedChatCompare || // if chat is not selected or doesn't match current chat\n      selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        d: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          d: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 21\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), messages && (!selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [getSender(user, selectedChat.users), /*#__PURE__*/_jsxDEV(ProfileModal, {\n            user: getSenderFull(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchMessages: fetchMessages,\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        d: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        w: \"100%\",\n        h: \"100%\",\n        borderRadius: \"lg\",\n        overflowY: \"hidden\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          w: 20,\n          h: 20,\n          alignSelf: \"center\",\n          margin: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: /*#__PURE__*/_jsxDEV(ScrollableChat, {\n            messages: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          onKeyDown: sendMessage,\n          id: \"first-name\",\n          isRequired: true,\n          mt: 3,\n          children: [istyping ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Lottie, {\n              options: defaultOptions // height={50}\n              ,\n              width: 70,\n              style: {\n                marginBottom: 15,\n                marginLeft: 0\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Input, {\n            variant: \"filled\",\n            bg: \"#E0E0E0\",\n            placeholder: \"Enter a message..\",\n            value: newMessage,\n            onChange: typingHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    // to get socket.io on same page\n    _jsxDEV(Box, {\n      d: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        children: \"Click on a user to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(SingleChat, \"J0/5w4jPVqRx8QfTCSBBWdq70n4=\", false, function () {\n  return [useToast];\n});\n\n_c = SingleChat;\nexport default SingleChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["FormControl","Input","Box","Text","IconButton","Spinner","useToast","getSender","getSenderFull","useEffect","useState","axios","ArrowBackIcon","ProfileModal","ScrollableChat","Lottie","animationData","io","UpdateGroupChatModal","ChatState","ENDPOINT","socket","selectedChatCompare","SingleChat","fetchAgain","setFetchAgain","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","toast","defaultOptions","loop","autoplay","rendererSettings","preserveAspectRatio","selectedChat","setSelectedChat","user","notification","setNotification","fetchMessages","config","headers","Authorization","token","data","get","_id","emit","error","title","description","status","duration","isClosable","position","sendMessage","event","key","post","content","chatId","on","newMessageRecieved","chat","includes","typingHandler","e","target","value","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","timeDiff","base","md","isGroupChat","users","chatName","toUpperCase","marginBottom","marginLeft"],"sources":["C:/Users/Dev/Documents/mern-chat-app/frontend/src/components/SingleChat.js"],"sourcesContent":["import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}